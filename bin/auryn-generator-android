#!/usr/bin/env node

/*
 * Generate ANT android project
 * After this command, it's ready to build with 'ant debug' or 'ant release'
 */


/**
 * Module dependencies.
 */

var auryn = require('../package.json');
var async = require('async');
var exec = require('child_process').exec;
var fs = require('fs');
var fse = require('fs-extra');
var generator = require('commander');
var osenv = require('osenv');
var path = require('path');
var source = require('../lib/source');


/* Global android configuration */

var ANDROID_TARGET = 'android-15';
var ANDROID_MAIN_CLASS = 'AurynMainActivity';
var AURYN_HOME = path.join(osenv.home(), '.auryn');


generator
  .version(auryn.version)
  .option('-p, --project-path [path]', 'Project path', path.resolve, path.resolve('.'))
  .option('-o, --output-path [path]', 'Generated android output path', path.resolve, path.resolve('./build/android'))
  .parse(process.argv);


/*
 * Generator steps
 */


var steps = {};


/* Get infos from project if exists */

steps.checkProject = function (next) {
  fs.readFile(generator.projectPath + '/package.json', 'utf8', function (err, raw) {
    if (err) return next({
      message: 'Failed to read package.json from ' + generator.projectPath,
      origin: err
    });

    var project = JSON.parse(raw);

    if (!project.appid) return next({
      message: 'No appid defined in package.json',
      origin: err
    });

    next(null, project);
  });
}

/* Call android sub process to create ant project */

steps.createAntProject = function (project, next) {
  var cmd = [
    'android create project',
    '--target', ANDROID_TARGET,
    '--name', project.name.replace(' ', ''),
    '--path', generator.outputPath,
    '--activity', ANDROID_MAIN_CLASS,
    '--package', project.appid
  ].join(' ');

  exec(cmd, function (err) {
    if (err) return next({
      message: 'Failed to generate android ant output',
      origin: err
    });

    next(null, project);
  });
}

/* Overwrite main Java class */

steps.generateJavaClass = function (project, next) {
  var srcBasePath = path.join(generator.outputPath, 'src');
  var relPackagePath = path.join.apply(null, project.appid.split('.'));
  var generatorCtx = {genDir: path.join(srcBasePath, relPackagePath)};

  source.generate('android', project, generatorCtx, function (err) {
    if (err) return next({
      message: 'Failed to generate android java class',
      origin: err
    });

    next(null, project);
  });
};


/* Copy jar libraries */

steps.copyJARLibs = function (project, next) {
  var libs = [
    'android-support-v4.jar',
    'freemarker.jar',
    'jaxen-1.1.1.jar',
    'json_simple-1.1.jar',
    'kroll-apt.jar',
    'kroll-common.jar',
    'kroll-v8.jar',
    'nineoldandroids-appc-2.4.0.jar',
    'thirdparty.jar',
    'ti-commons-codec-1.3.jar',
    'titanium.jar'
  ];

  async.each(libs, function (libName, next) {
    fse.copy(
      path.join(AURYN_HOME, 'sdk', 'android', libName),
      path.join(generator.outputPath, 'libs', libName),
      next
    );
  }, function (err) {
    if (err) return next({
      message: 'Failed to copy libs',
      origin: err
    });

    next(null, project);
  });
};


/* Copy native libraries */

steps.copyNativeDirs = function (project, next) {
  var dirs = ['armeabi', 'armeabi-v7a', 'x86'];

  async.each(dirs, function (dirName, next) {
    fse.copy(
      path.join(AURYN_HOME, 'sdk', 'android', 'native', 'libs', dirName),
      path.join(generator.outputPath, 'libs', dirName),
      next
    );
  }, function (err) {
    if (err) return next({
      message: 'Failed to copy native libs',
      origin: err
    });

    next(null, project);
  });
};



steps.all = [
  steps.checkProject,
  steps.createAntProject,
  steps.generateJavaClass,
  steps.copyJARLibs,
  steps.copyNativeDirs
];

async.waterfall(steps.all, function (err) {
  var errLogFile = path.resolve('./auryn.log');

  if (err) {
    fs.writeFile(errLogFile, err.origin, function () {
      console.error(err.message);
      console.log('See', errLogFile, 'for more details')
      process.exit(1)
    });
  }
});
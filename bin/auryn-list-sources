#!/usr/bin/env node

/*
 * List env items (libs / sources)
 */


/**
 * Module dependencies.
 */

var auryn = require('../package.json');

var program = require('commander');

var _ = require('lodash');
var async = require('async');
var auryn = require('../package.json');
var config = require('../lib/config');
var fs = require('fs');
var path = require('path');
var program = require('commander');


program
  .version(auryn.version)
  .usage('<operating system>\n\toperating system = android, ios')
  .option('-p, --project-path [path]', 'Choose another path than current', '.')
  .parse(process.argv);

if (program.args.length !== 1) {
  program.outputHelp();
  process.exit(1);
}

if (! _.contains(['android', 'ios'], program.args[0])) {
  console.error('Error: System', program.args[0], 'unknown.')
  process.exit(1);
}

var sourcesDir = path.join(__dirname, '../lib/templates', program.args[0]);
var steps = {};

steps.readConfig = function (next) {
  config.resolve({projectPath: program.projectPath}, next);
};

steps.listTemplateDir = function (ctx, next) {
  fs.readdir(sourcesDir, function (err, sources) {
    if (err) next(err);
    
    process.stdout.write(sources.map(function (fileName) {
      return path.join.apply(
        null,
        ['src']
          .concat(ctx.project.appid.split('.'))
          .concat(fileName.replace('.hbs', ''))
      )
    }).join(' '));
  });
};


async.waterfall(_.values(steps), function (err) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
});